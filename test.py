import binascii

def c2b(c):
	return int(c)

def b2c(b):
	return str(b)
# 00110100
# 10110111
# 10000011
# Berkay key_stream = 0011010011011010001001110110110000111010
key_stream_normal = " 001011001011010111011110011000101010011111101000001110000100100011011001011010111011110011000101010011111101000001110000100100011011001011010111011110011000101010011111101000001110000100100011011001011010111011110011000101010011111101000001110000100100011"
# Berkay key_stream = 		0011010011011010001001110110110000111010
key_stream_lfsr_reversed = "001011000111000000110111101000000010010100111111110001100010101010000100001100110000011111011101111110101001011010101100111001001100100010111000100011110010111100001010001101011111001111011001010111010110111001101001101101000100111011011000011101001001000"
# Berkay key_stream = 		 0011010011011010001001110110110000111010
key_stream_state_reversed = "001101000001110000100100011011001011010111011110011000101010011111101000001110000100100011011001011010111011110011000101010011111101000001110000100100011011001011010111011110011000101010011111101000001110000100100011011001011010111011110011000101010011111"
# Berkay key_stream = 	   0011010011011010001001110110110000111010
key_stream_all_reversed = "001101001101101000100111011011000011101001001000001011000111000000110111101000000010010100111111110001100010101010000100001100110000011111011101111110101001011010101100111001001100100010111000100011110010111100001010001101011111001111011001010111010110111"

agree = [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1]

key_stream_bits = map(c2b, list(key_stream_all_reversed))
print key_stream_bits[:40]
# key_stream_bits.reverse()
ciphertext = "0110111101000111111101010010111011101011"
ciphertext_bits = map(c2b, list(ciphertext))
print ciphertext_bits

result_bits = []
result_str = ""
result_ascii = None
result_int = None

# key_stream_bits = key_stream_bits[1:] + key_stream_bits[:1]
for i in range(0, 40):
	# print ciphertext_bits[i],
	# print "Xoring (%d bit) %d and %d = %d" % (i, key_stream_bits[i], ciphertext_bits[i], (key_stream_bits[i] + ciphertext_bits[i]) % 2)
	result_bits.append((key_stream_bits[i] + ciphertext_bits[i]) % 2)
print "".join(map(b2c, result_bits))
# result_int = int(result_str, 2)
# try:
# 	result_ascii = binascii.unhexlify('%x' % result_int)
# 	print result_ascii
# except:
# 	pass
# result_bits = []